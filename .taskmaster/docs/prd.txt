# Budget App v2 - Updated Product Requirements Document

## Current State Summary
The app has a solid foundation with Next.js 15, TypeScript, and Supabase. The Income step is working perfectly and serves as the gold standard for UI/UX patterns. However, several critical issues prevent users from completing the budget setup flow.

## Immediate Focus: Complete Budget Setup Flow
**Goal**: Users must be able to complete all 4 steps of budget setup without errors or confusion.

## Critical Issues to Resolve (Priority Order)

### 1. Fixed Expenses Bugs (IMMEDIATE)
**Current Problems**:
- Visual: Cards overlap instead of having proper spacing
- Data: Amount displays as "NaN"
- Validation: "Other" category triggers validation error
- Updates: "Expense ID required" error when saving edits
- Frequency: Dropdown options don't match Income step

**Target State**: 
- Cards spaced like Income step
- Amounts display correctly
- All categories work including "Other"
- Edit/save works smoothly
- Frequency options identical to Income (minus "Per paycheck" for primary)

### 2. Envelope Step Broken (BLOCKING)
**Current Problems**:
- Existing envelopes don't load from database
- Creation fails with validation errors
- UI doesn't match Income pattern
- "Add suggested" throws error

**Target State**:
- Load and display existing envelopes
- Create/edit/delete works perfectly
- UI matches Income step pattern exactly
- Suggested envelopes one-click setup

### 3. UI/UX Pattern Consistency
**The Income Pattern** (to be replicated):
- Clean card list when viewing
- "Add New" button at top of section
- Click Add/Edit → form appears, list hidden
- Save/Cancel → return to list view
- Smooth transitions
- Clear visual hierarchy

**Apply to**: Fixed Expenses, Envelopes, Savings Goals

## Core Concepts Clarification

### Envelopes vs Savings Goals
**Envelopes** (Spending Money):
- Groceries ($600/period)
- Household Supplies ($200/period)
- Fun Money ($300/period)
- Dining Out ($200/period)
- Personal Care ($150/period)
- Miscellaneous ($100/period)

**Savings Goals** (Future Money):
- Emergency Fund (target: $10,000)
- Vacation Fund (target: $5,000)
- New Car Fund (target: $20,000)
- NOT spending categories

### Database Schema Alignment
The schema is well-designed. Key fields to utilize:

**Envelopes**:
- `default_amount`: Suggested allocation per period
- `rollover_rule`: 'save', 'rollover', 'rollover_limit'
- `rollover_limit`: Max amount to carry forward

**Fixed Expenses**:
- `frequency_type`: Standardize across all components
- `frequency_config`: Store schedule details
- `is_variable`: For bills that fluctuate

## Technical Requirements

### Form Validation
```typescript
// Envelope creation should have defaults
const envelopeDefaults = {
  amount: 0, // Can be 0 for initial setup
  rolloverRule: 'rollover' as const,
  rolloverLimit: null
};

// Fixed expense validation
const fixedExpenseSchema = {
  name: z.string().min(1),
  category: z.string().min(1), // "Other" must be valid
  estimated_amount: z.number().positive(),
  frequency_type: z.enum(['monthly', 'biweekly', 'weekly', 'yearly', 'quarterly', 'semi_monthly'])
};
```

### State Management Pattern
```typescript
// Consistent UI state management
interface StepUIState {
  mode: 'list' | 'add' | 'edit';
  editingItem: Item | null;
  isLoading: boolean;
  error: string | null;
}

// When mode changes to 'add' or 'edit', hide the list
// When saving completes or cancelled, return to 'list'
```

### API Consistency
All CRUD operations should follow same pattern:
- GET: /api/budget-setup/[resource]
- POST: /api/budget-setup/[resource] (create)
- PUT: /api/budget-setup/[resource] (update with ID in body)
- DELETE: /api/budget-setup/[resource]/[id]

## Success Metrics

### Phase 1 (Bugs): Complete in 2-3 days
- [ ] Fixed Expenses works without errors
- [ ] All amounts display correctly
- [ ] Category validation accepts "Other"
- [ ] Updates save successfully

### Phase 2 (Envelopes): Complete in 3-4 days
- [ ] Existing envelopes load from database
- [ ] CRUD operations work perfectly
- [ ] UI matches Income step pattern
- [ ] Suggested envelopes adds 6 defaults

### Phase 3 (Polish): Complete in 3-4 days
- [ ] All 4 steps use consistent UI pattern
- [ ] Navigation preserves data
- [ ] Mobile responsive
- [ ] Clear help text guides users

## Development Approach

### 1. Fix First, Enhance Later
- Get basic functionality working
- Fix all blocking bugs
- Then improve UX/UI

### 2. Test Each Fix
- Manual testing after each bug fix
- Verify data persistence
- Check edge cases

### 3. Maintain Consistency
- Use Income step as reference
- Copy working patterns
- Don't reinvent what works

## Next Steps for Development

### Today's Priority
1. Fix Fixed Expenses overlapping cards
2. Fix NaN amount display
3. Fix category validation

### Tomorrow's Priority
1. Fix expense update ID error
2. Align frequency dropdowns
3. Debug envelope loading

### This Week's Goal
Complete all 4 steps without errors, matching Income step quality throughout.